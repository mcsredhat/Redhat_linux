### Continuing Cron Configuration and Testing ###

1. **Check Cron Service and Packages:**

   First, ensure the cron service is running and check related packages.

   
   ps -ef | grep cron   # Check if cron service is running
   rpm -qa | grep cron  # Check installed cron packages
   ```

2. **Inspect Cronie Package:**

   Verify the installation directory and configuration files for `cronie`.

   
   rpm -ql cronie   # List files installed by cronie package
   rpm -qlc cronie  # List configuration files for cronie
   ```

3. **Check Cron Service Status:**

   Verify the status of the cron daemon (`crond`).

   
   ls -l /etc/init.d/crond   # Check cron daemon init script
   service crond status      # Check current status of cron service
   ```

4. **Edit System-wide Crontab (`/etc/crontab`):**

   Edit the system-wide crontab to schedule jobs for `linuxcbt`.

   
   vi /etc/crontab
   ```

   Add the following lines to schedule jobs every 1 minute and every 2 minutes respectively:

   ```plaintext
   */1 * * * * linuxcbt /usr/bin/uptime >> /home/linuxcbt/uptime.stat
   */2 * * * * linuxcbt du -chs >> /home/linuxcbt/du.stat
   ```

5. **Verify and Review Cron Jobs:**

   After setting up the crontab entries, verify the setup and review the logs.

   
   date   # Check current date/time
   
   # Check status of crontab file
   stat /etc/crontab
   
   # Check files created by cron jobs
   ls -l ~linuxcbt/
   ```

6. **Check Output Files of Cron Jobs:**

   Ensure the output files of the cron jobs are created and populated.

   
   cat ~linuxcbt/uptime.stat   # Check uptime statistics
   cat ~linuxcbt/du.stat        # Check disk usage statistics
   ```

7. **Configure User-specific Cron Jobs:**

   Edit the crontab for user `linuxcbt` to schedule additional tasks.

   
   crontab -e -u linuxcbt
   ```

   Add the following cron job to the user's crontab:

   ```plaintext
   */2 * * * * df -h >> /home/linuxcbt/df.stat
   ```

8. **Review and Monitor Cron Job Execution:**

   Review the output files and monitor the execution of cron jobs to ensure they are running as expected.

   
   ls -l /var/spool/cron/   # List cron job files for monitoring
   
   # Check specific cron job outputs
   cat ~linuxcbt/uptime.linuxcbt.stat
   cat ~linuxcbt/df.stat
   ```

9. **Configure Access Control for Cron:**

   Manage access control for cron jobs using `cron.allow` and `cron.deny` files.

   
   ls -l /etc/cron.deny    # List cron deny file
   
   # Edit cron.allow or cron.deny as necessary
   vi /etc/cron.allow
   
   # Add user1 to cron.deny
   echo "user1" >> /etc/cron.deny
   ```

10. **Verify Access Control Configuration:**

    Ensure access control changes are applied correctly.

    
    id user1     # Verify user1's UID and GID
    grep user1 /etc/passwd   # Ensure user1 exists in passwd file
   
    # Switch to user1 and edit crontab
    su user1
    crontab -e    # Edit user1's crontab as needed
    ```

11. **Review and Clean Up:**

    After configuring and testing cron jobs, review logs and output files to ensure everything is functioning properly.

    
    # Review output files and logs
    ls -l cron.d*
    
    # Clean up cron.allow if necessary
    rm -rf /etc/cron.allow
    ```
It seems like you want to add `user1` to the `cron.deny` file and verify the status of this file. Here's how you can proceed:

### Adding `user1` to `cron.deny` and Verifying

1. **Add `user1` to `cron.deny`:**

   To restrict `user1` from using cron, you add `user1` to the `cron.deny` file.

   
   echo "user1" >> /etc/cron.deny
   ```

   This command appends `user1` to the `cron.deny` file, effectively denying `user1` from using cron jobs.

2. **Verify the `cron.deny` File:**

   After adding `user1` to `cron.deny`, you can check the contents and verify if `user1` is listed.

   
   cat /etc/cron.deny    # Check the contents of cron.deny
   ```

   Ensure that `user1` is listed in the `cron.deny` file.

### Verifying the Status

After adding `user1` to `cron.deny`, you may want to verify its status using `stat`:


stat /etc/cron.deny
```

This command will display detailed information about the `cron.deny` file, including access permissions, modification times, etc.

It seems like you want to perform various operations related to `anacron` and `at jobs`. Let's go through each section step-by-step.

### Anacron

1. **Checking `anacrontab` and `cron.daily` directory:**

   
   ls -l /etc/anacrontab      # Check the anacrontab file
   cat /etc/anacrontab         # View the contents of anacrontab
   ls -l /etc/cron.daily/     # Check contents of cron.daily directory
   cat /etc/crontab           # View the contents of crontab
   cat /etc/cron.d/0hourly    # View the contents of 0hourly in cron.d
   rpm -qa | grep -i anacron  # Check if anacron is installed
   rpm -ql anacron            # List files installed by anacron package
   ls -l /var/spool/anacron/  # Check the spool directory for anacron jobs
   ```

   Ensure to review the output of each command to understand the configuration and status of `anacron` and related cron jobs.

### at jobs

2. **Managing `at` jobs:**

   sudo yum install at -y
   rpm -ql at            # List files installed by the 'at' package
   ps -ef | grep atd     # Check if atd (at daemon) is running
   date                  # Check the current date and time
   at 09:16              # Schedule a job to run at 09:16
   ps -ef >> /root/ps.dump  # Append the process list to a file
   atq                   # List the current at jobs
   date                  # Check the current date and time again
   atq                   # List the current at jobs
   ls -ltr ~             # List files in the home directory in reverse time order
   less /root/ps.dump    # View the contents of the ps.dump file
   date                  # Check the current date and time
   at 09:19              # Schedule another job to run at 09:19
   ps -aux >> /root/ps.dump1  # Append process list to another file
   atq                   # List the current at jobs
   cat ~/ps.dump1        # View the contents of ps.dump1 file
   atrm 1                # Remove the at job with ID 1
   cd                    # Change directory to user's home directory
   vi at.job.1           # Edit a script or command to be executed by 'at'
   ps -ef >> /root/ps.dump.2  # Append process list to another file
   df -h >> /root/df.dump  # Append disk usage information to a file
   at -f at.job.1 09:24   # Execute the at job at 09:24 using the content of at.job.1
   chmod 777 at.job.1     # Modify permissions of at.job.1 (note: be cautious with 777 permissions)
   at -f at.job.1 09:25   # Execute the at job at 09:25 using the content of at.job.1
   vi at.job.1           # Edit at.job.1 again if needed
   at -f at.job.1 09:27   # Execute the at job at 09:27 using the updated content of at.job.1
   ls -l at.job.1         # List details of at.job.1
   chown linuxcbt:root at.job.1  # Change ownership of at.job.1
   at -f at.job.1 09:27   # Execute the at job again at 09:27 with updated content
   cd /etc/               # Change directory to /etc/
   cd ~linuxcbt/          # Change directory to linuxcbt's home directory
   ls                     # List contents of the current directory
   cat df.stat            # View the contents of df.stat file
   clear                  # Clear the terminal screen
   atq                    # List current at jobs again
   batch                  # Start an at job in batch mode
   ps â€“chs >> /root/ps.dump.batch  # Append process list to another file
   uptime >> /root/uptime.stat  # Append uptime information to a file
   date >> /root/bash.date # Append current date to a file
   Ctrl+d                 # Exit the batch command (or use exit command)
   ```

   These commands help you manage `at` jobs, schedule tasks, view and manipulate job queues, and examine output files.
It seems there are some misunderstandings or typos in your commands related to `at` and `batch` jobs. Let's correct and clarify the commands you mentioned:

### Commands and Clarifications

1. **Check current date and time:**

   
   date
   ```

   This command simply prints the current date and time.

2. **List current `at` jobs:**

   
   atq
   ```

   This command lists all the current `at` jobs in the queue.

3. **View contents of `bash.date` file in home directory:**

   
   cat ~/bash.date
   ```

   This will display the contents of the `bash.date` file located in the user's home directory.

4. **View contents of `ps.dump.batch` file in home directory:**

   
   cat ~/ps.dump.batch
   ```

   This command will display the contents of the `ps.dump.batch` file located in the user's home directory.

5. **Check disk usage with summary:**

   
   du -chs
   ```

   This command shows the total disk usage summary of the current directory.

6. **Check disk usage with human-readable sizes:**

   
   du -ch
   ```

   This command lists the disk usage of files and directories in the current directory in a human-readable format.

7. **Verify location and details of `at` and `batch` commands:**

   
   ls -l /usr/bin/at
   ls -l /usr/bin/batch
   ```

   These commands check the details and permissions of the `at` and `batch` commands in `/usr/bin`.

8. **Inspect file information for `batch` command:**

   
   file /usr/bin/batch
   ```

   This command provides detailed information about the file type and attributes of `/usr/bin/batch`.

9. **View contents of `batch` command:**

   
   cat /usr/bin/batch
   ```

   This command displays the contents of the `batch` command executable file.

10. **Schedule an `at` job to run now + 1 day:**

    
    at now + 1 day
    ```
